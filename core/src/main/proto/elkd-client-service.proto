syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.elkd.core.server.client";

service ElkdClientService {
    // @EvolvingApi
    //
    // Execute a handlers, e.g `create-topic`
    rpc ClientCommand (RpcClientRequest) returns (RpcClientResponse) {}

    // @EvolvingApi
    //
    // Provide a stream for clients to produce to a topic.
    rpc ProduceTopic (stream RpcProducerRecord) returns (stream RpcProducerAck) {}

    // @EvolvingApi
    //
    // Provide a stream for clients to consume a topic.
    rpc ConsumeTopic (stream RpcConsumerRequest) returns (stream RpcConsumerResponse) {}
}

// @EvolvingApi
//
// RpcClientCommand contains the handlers parameters at its most basic level.
// To prevent having to change the RPC service definition each time we wish
// to addKV a new client handlers, we can instead use this flexible model.
//
// @property handlers   - handlers namespace to execute
// @property params     - parameter names for args (index of parameter in list has corresponding value in `args`.
// @property args       - values for each parameter
message RpcClientRequest {
    string command = 1;
    repeated RpcArgPair args = 3;
}

message RpcArgPair {
    string arg = 1;
    string param = 2;
}

// @EvolvingApi
//
// Response returned by invoking ClientCommandRequest.
//
// @property response - handlers response
message RpcClientResponse {
    string response = 1;
    uint32 code = 2;
}

// @Experimental
//
// Producer Acknowledgement
// @property notification unsigned int - see ProducerACK.Codes
message RpcProducerAck {
    uint32 notification = 1;
}

// @EvolvingApi
//
// Common stream payload, representing a key and value.
//
// @property topic  - topic to send Key/Value to.
message RpcProducerRecord {
    string topic = 1;
    repeated RpcKV kv = 2;
}

// @EvolvingApi
//
// @property key byte string    - opaque field, client determines data type.
// @property value byte string  - opaque field, client determines data type.
message RpcKV {
    string key = 1;
    string value = 2;
}

// @EvolvingApi
//
// Client specifies the topic it wishes to consume from.
// @property topic byte string  - Topic, by namespace, to consume from.
// @property index unsigned int - Topic index position consumer is at, specifies position in Topic to consume from.
//                                If not specified, server will assume consumer is requesting the log end e.g
//                                the entry that does not yet exist.
message RpcConsumerRequest {
    string topic = 1;
    uint64 index = 2;
}

message RpcConsumerResponse {
    string topic = 1;
    uint64 offset = 2;
    repeated RpcKV kvs = 3;

    // Error states will be communicated via this field.
    // @see ConsumerACK
    uint32 status = 4;
}
